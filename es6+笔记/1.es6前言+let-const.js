/*  JavaScript = DOM + EMCAScript2015 + BOM
        在2015年 w3c组织给JavaScript的一个小部分 EMCAScript2015 增加了一些新语法
        简称es6 之后还有es7等
        
        ES6的优点：简化了一些写法、让JavaScript的写法更加的方便和简介、加快了程序员编写JavaScript的速度等好处。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。
            当然目前浏览器都要比较新的版本才能支持这类的ES6以上的语法.
            
        Nodejs 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node 已经实现的 ES6 特性。

        如果真心想学es6的 可以参考阮一峰老师的es入门：http://es6.ruanyifeng.com/ 里面有详细的es6的一些解释。

*/
/*
    1. 变量、常量命名：let 和 const（解决了var变量的无块级作用域、可重复声明、变量提升等缺点）
        ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。
        1.1 let 变量 可多次赋值，但是没办法定义相同的变量
            1.1.1 无块级作用域： ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。
            例如：
            {
                let a = 10;
                var b = 1;
            }
            a // ReferenceError: a is not defined.
            b // 1

            1.1.2 可重复声明
            var a = 10; var a = 11; console.log(a);//11
            1.1.3 变量提升
                var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。
            console.log(b);//undefined
            var b = 10;
        1.2 const声明一个只读的常量。一旦声明，常量的值就不能改变。
            const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。
             简称：除了基本数据类型、其他的引用数据类型的内部都可以修改，（实质是：引用的空间是不能重复赋值）
                例如：
                    const a = 10; a = 11;//报错 不能重复赋值
                    const obj = {}; obj.a = 10; //可以赋值
                    obj = {};//重新引用内存空间 报错
                 
*/